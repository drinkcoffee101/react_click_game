{"version":3,"sources":["index.js"],"names":["Navbar","props","className","href","status","score","topscore","Card","src","img","alt","style","height","width","onClick","random","Game","state","characters","count","winner","this","map","character","index","key","data_key","search","arr","i","length","j","Math","floor","temp","setState","nameKey","myArray","highScore","reset","newScore","winning","randomize","display","flexWrap","generateCharacters","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be34ca6a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\n\n//the navbar for the page\nlet Navbar = props => {\n    return (\n        <div className=\"navbar-fixed\">\n            <nav>\n                <div className=\"nav-wrapper\">\n                    <a href=\"#!\" className=\"left\">MegaClick</a>\n                    <ul className='brand-logo'>\n                        <li>{props.status ? 'Congrats, you did it...' : \"If you win, I'll let you know\"}</li>\n                    </ul>\n                    <ul className=\"right\">\n                        <li className='btn '>Score:{props.score} </li>\n                        <li className='btn'>Top Score:{props.topscore} </li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n\n    )\n}\n\n\n//create cards \nlet Card = props => {\n    return (\n        <div className='flexitem' >\n            <div>\n                <div className='card-image'>\n                    <img className='circle hoverable' src={props.img} alt='flameguy' style={{ height: 150, width: 150 }}\n                        onClick={props.random}\n                    ></img>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\n//create a game class\nclass Game extends Component {\n\n    state = {\n        characters: [{ img: 'https://art.pixilart.com/thumb/8d261193477eaf2.png', count: 0 }, { img: 'https://art.pixilart.com/bee6ceb3b712870.png', count: 0 }, { img: 'https://art.pixilart.com/a9171a195faada0.png', count: 0 }, { img: 'https://art.pixilart.com/073bd904f7c8f0b.png', count: 0 }, { img: 'https://art.pixilart.com/298c6f57a8016c3.png', count: 0 }, { img: 'https://art.pixilart.com/d6e891178f21509.png', count: 0 }, { img: 'https://art.pixilart.com/e30d34ce6d6993d.png', count: 0 }, { img: 'https://art.pixilart.com/b86c996524f9393.png', count: 0 }, { img: 'https://art.pixilart.com/3099617d885b900.png', count: 0 }],\n        score: 0,\n        topscore: 0,\n        winner: false\n    }\n\n\n    generateCharacters() {\n        return this.state.characters.map((character, index) => {\n            return <Card img={character.img} key={index} data_key={character.img} random={() => this.search(character.img, this.state.characters)} />\n        })\n    }\n\n    //randomize the array after clicking an img\n    randomize() {\n        const arr = this.state.characters\n        for (let i = arr.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * i)\n            const temp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = temp\n        }\n        this.setState({ characters: arr })\n    }\n    \n    winning() {\n        this.setState({winner: true})\n        \n    }\n    //search for the character that was clicked and update click count\n    search(nameKey, myArray) {\n        let highScore = this.state.topscore\n\n        for (var i = 0; i < myArray.length; i++) {\n\n            if (myArray[i].img === nameKey) {\n\n                myArray[i].count = ++myArray[i].count\n\n                //if the character hs been clicked more than once, reset the game\n                if (myArray[i].count > 1) {\n                    this.reset()\n                }\n                else {\n                    let newScore = this.state.score\n\n                    this.setState({ characters: myArray, score: ++newScore })\n                    //change high score \n                    if (newScore > highScore || newScore === highScore) {\n                        this.setState({ topscore: newScore })\n                        if (newScore === this.state.characters.length) {\n                            this.winning()\n                        }\n                    }\n                    this.randomize()\n                }\n                return\n            }\n        }\n    }\n\n    reset() {\n        this.setState({ characters: [{ img: 'https://art.pixilart.com/thumb/8d261193477eaf2.png', count: 0 }, { img: 'https://art.pixilart.com/bee6ceb3b712870.png', count: 0 }, { img: 'https://art.pixilart.com/a9171a195faada0.png', count: 0 }, { img: 'https://art.pixilart.com/073bd904f7c8f0b.png', count: 0 }, { img: 'https://art.pixilart.com/298c6f57a8016c3.png', count: 0 }, { img: 'https://art.pixilart.com/d6e891178f21509.png', count: 0 }, { img: 'https://art.pixilart.com/e30d34ce6d6993d.png', count: 0 }, { img: 'https://art.pixilart.com/b86c996524f9393.png', count: 0 }, { img: 'https://art.pixilart.com/3099617d885b900.png', count: 0 }], score: 0 })\n    }\n\n    render() {\n        return (\n            <div>\n                <Navbar score={this.state.score} topscore={this.state.topscore} status={this.state.winner}/>\n                <div className='flex-container container' style={{ display: 'flex', flexWrap: 'wrap', width: 465 }}>\n                    {this.generateCharacters()}\n                </div>\n            </div>\n        )\n    }\n}\n\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n"],"sourceRoot":""}